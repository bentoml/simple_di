from typing import Any, Callable, Dict, Tuple, TypeVar, Union, overload
from typing_extensions import GenericMeta

class _SentinelClass: ...

class ProviderMeta(GenericMeta):
    def __new__(mcs, class_name: str, bases: Tuple[type], attrs: Dict[str, Any], state_fields: Tuple[str, ...] = ..., **kwargs: Any) -> ProviderMeta: ...
VT = TypeVar('VT')

class Provider(metaclass=ProviderMeta):
    STATE_FIELDS: Tuple[str, ...]
    def __init__(self) -> None: ...
    def set(self, value: Union[_SentinelClass, VT]) -> None: ...
    def get(self) -> VT: ...
    def reset(self) -> None: ...

class _ProvideClass:
    def __getitem__(self, provider: Provider[VT]) -> VT: ...

Provide: Any
WrappedCallable = TypeVar('WrappedCallable', bound=Callable[..., Any])


@overload
def inject(func: WrappedCallable, squeeze_none: bool = ...) -> WrappedCallable: ...
@overload
def inject(func: None = ..., squeeze_none: bool = ...) -> Callable[[WrappedCallable], WrappedCallable]: ...
def sync_container(from_: Any, to_: Any) -> None: ...

container: Any
skip = sentinel
not_passed = sentinel
