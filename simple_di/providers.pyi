from simple_di import Provider as Provider, VT as VT, _SentinelClass as _SentinelClass
from typing import Any, Callable as CallableType, Dict, Tuple, Union

class Static(Provider[VT]):
    STATE_FIELDS: Tuple[str, ...]
    def __init__(self, value: VT) -> None: ...

class Factory(Provider[VT]):
    STATE_FIELDS: Tuple[str, ...]
    def __init__(self, func: CallableType[..., VT], *args: Any, **kwargs: Any) -> None: ...

class SingletonFactory(Factory[VT]):
    STATE_FIELDS: Tuple[str, ...]
    def __init__(self, func: CallableType[..., VT], *args: Any, **kwargs: Any) -> None: ...
Callable = Factory
MemoizedCallable = SingletonFactory
ConfigDictType = Dict[Union[str, int], Any]
PathItemType = Union[int, str, Provider[int], Provider[str]]

class Configuration(Provider[ConfigDictType]):
    STATE_FIELDS: Tuple[str, ...]
    fallback: Any
    def __init__(self, data: Union[_SentinelClass, ConfigDictType] = ..., fallback: Any = ...) -> None: ...
    def set(self, value: Union[_SentinelClass, ConfigDictType]) -> None: ...
    def get(self) -> Union[ConfigDictType, Any]: ...
    def reset(self) -> None: ...
    def __getattr__(self, name: str) -> _ConfigurationItem: ...
    def __getitem__(self, key: PathItemType) -> _ConfigurationItem: ...

class _ConfigurationItem(Provider[Any]):
    STATE_FIELDS: Tuple[str, ...]
    def __init__(self, config: Configuration, path: Tuple[PathItemType, ...]) -> None: ...
    def set(self, value: Any) -> None: ...
    def get(self) -> Any: ...
    def reset(self) -> None: ...
    def __getattr__(self, name: str) -> _ConfigurationItem: ...
    def __getitem__(self, key: PathItemType) -> _ConfigurationItem: ...
